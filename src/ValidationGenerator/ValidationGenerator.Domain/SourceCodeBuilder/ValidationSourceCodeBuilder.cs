using System.Diagnostics.Contracts;
using ValidationGenerator.Shared;

namespace ValidationGenerator.Domain;

public sealed class ClassValidationData
{
    public bool GenerateThrowIfNotValid { get; private set; }
    public bool GenerateIsValidProperty { get; private set; }
    public bool GenerateValidationResult { get; private set; }
    public string NameSpace { get; private set; }
    public string ClassName { get; private set; }
    public string Version { get; private set; }
    public IReadOnlyList<PropertyValidationData> PropertyValidationList { get; private set; }

    private bool IsGlobalNameSpace => string.IsNullOrEmpty(NameSpace);

    public ClassValidationData(
        string className,
        string nameSpace,
        string version,
        IReadOnlyList<PropertyValidationData> propertyValidationList,
        bool generateThrowIfNotValid = true,
        bool generateIsValidProperty = false,
        bool generateValidationResult = false)
    {
        ClassName = className;
        NameSpace = nameSpace;
        Version = version;
        PropertyValidationList = propertyValidationList;
        GenerateThrowIfNotValid = generateThrowIfNotValid;
        GenerateIsValidProperty = generateIsValidProperty;
        GenerateValidationResult = generateValidationResult;
    }

    [Pure]
    public string GenerateFileSourceCode()
    {
        if (IsGlobalNameSpace)
        {
            return
$$"""
// <auto-generated/>

#nullable enable

{{GenerateSourceCodeForPartialClass()}}
""";
        }
        else
        {
            return
$$"""
// <auto-generated/>

#nullable enable

namespace {{NameSpace}}
{
    {{GenerateSourceCodeForPartialClass()}}
}
""";
        }
    }

    private string GenerateSourceCodeForPartialClass()
    {
        // TODO: discuss support for struct and record
        return $$"""
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Validation.Generator", "{{Version}}")]
partial class {{ClassName}}
{
    {{GenerateSourceCodeForThrowIfNotValidMethod()}}
    {{GenerateSourceCodeForIsValidProperty()}}
    {{GenerateSourceCodeForValidationResultMethod()}}
}
""";
    }

    [Pure]
    private string GenerateSourceCodeForThrowIfNotValidMethod()
    {
        if (!GenerateThrowIfNotValid)
            return string.Empty;

        return $$"""
public void ThrowIfNotValid()
        {
            ValidationGenerator.Shared.ValidationResult result = GetValidationResult();
            if (result is not null && !result.IsValid)
                throw new ValidationGenerator.Shared.{{nameof(ValidationException)}}(result);
        }

""";
    }

    [Pure]
    private string GenerateSourceCodeForIsValidProperty()
    {
        if (!GenerateIsValidProperty)
            return string.Empty;

        return $$"""
/// <summary>
        /// Determine if the validation success or failed.
        /// </summary>
        /// <returns> <c>true</c> if validation successed, otherwise; <c>false</c></returns>
        public bool IsValid
        {
            get
            {
                ValidationGenerator.Shared.ValidationResult result = GetValidationResult();
                return (result is not null && result.IsValid);
            }
        }

""";
    }

    [Pure]
    private string GenerateSourceCodeForValidationResultMethod()
    {
        if (!GenerateValidationResult)
            return string.Empty;

        return new ValidationResultMethodGenerator(PropertyValidationList).GetValidationResultMethod();
    }
}